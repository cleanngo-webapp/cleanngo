<?php

namespace App\Http\Controllers\Admin;

use App\Http\Controllers\Controller;
use App\Models\InventoryItem;
use App\Models\InventoryTransaction;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\Validator;
use Carbon\Carbon;
use Illuminate\Support\Facades\Log;

class AdminInventoryController extends Controller
{
    /**
     * Display the inventory management page
     */
    public function index()
    {
        $items = InventoryItem::active()->orderBy('created_at', 'desc')->get();
        
        return view('admin.inventory', compact('items'));
    }

    /**
     * Store a newly created inventory item
     */
    public function store(Request $request)
    {
        // Validate the request data (removed item_code validation since it will be auto-generated)
        $validator = Validator::make($request->all(), [
            'name' => 'required|string|max:255',
            'category' => 'required|in:Tools,Machine,Cleaning Agent,Consumables',
            'quantity' => 'required|integer|min:0',
            'unit_price' => 'required|numeric|min:0',
            'reorder_level' => 'required|integer|min:0',
            'notes' => 'nullable|string'
        ]);

        if ($validator->fails()) {
            return response()->json([
                'success' => false,
                'message' => 'Validation failed',
                'errors' => $validator->errors()
            ], 422);
        }

        try {
            // Create the item (item code will be auto-generated by the model)
            $item = InventoryItem::create($request->all());
            
            return response()->json([
                'success' => true,
                'message' => 'Inventory item created successfully!',
                'item' => $item
            ]);
        } catch (\Exception $e) {
            return response()->json([
                'success' => false,
                'message' => 'Failed to create inventory item: ' . $e->getMessage()
            ], 500);
        }
    }


    /**
     * Display the specified inventory item
     */
    public function show($id)
    {
        $item = InventoryItem::findOrFail($id);
        
        return response()->json([
            'success' => true,
            'item' => $item
        ]);
    }

    /**
     * Update the specified inventory item
     */
    public function update(Request $request, $id)
    {
        $item = InventoryItem::findOrFail($id);

        // Validate the request data (item_code is not editable, so removed from validation)
        $validator = Validator::make($request->all(), [
            'name' => 'required|string|max:255',
            'category' => 'required|in:Tools,Machine,Cleaning Agent,Consumables',
            'quantity' => 'required|integer|min:0',
            'unit_price' => 'required|numeric|min:0',
            'reorder_level' => 'required|integer|min:0',
            'notes' => 'nullable|string'
        ]);

        if ($validator->fails()) {
            return response()->json([
                'success' => false,
                'message' => 'Validation failed',
                'errors' => $validator->errors()
            ], 422);
        }

        try {
            $item->update($request->all());
            
            return response()->json([
                'success' => true,
                'message' => 'Inventory item updated successfully',
                'item' => $item->fresh()
            ]);
        } catch (\Exception $e) {
            return response()->json([
                'success' => false,
                'message' => 'Failed to update inventory item: ' . $e->getMessage()
            ], 500);
        }
    }

    /**
     * Remove the specified inventory item
     */
    public function destroy($id)
    {
        try {
            $item = InventoryItem::findOrFail($id);
            
            // Check if item has any transactions
            $hasTransactions = $item->transactions()->exists();
            
            if ($hasTransactions) {
                // Delete all related transactions first
                $item->transactions()->delete();
            }
            
            // Now delete the item
            $item->delete();
            
            return response()->json([
                'success' => true,
                'message' => 'Inventory item deleted successfully'
            ]);
        } catch (\Exception $e) {
            return response()->json([
                'success' => false,
                'message' => 'Failed to delete inventory item: ' . $e->getMessage()
            ], 500);
        }
    }

    /**
     * Get inventory statistics for dashboard
     */
    public function getStats()
    {
        $totalItems = InventoryItem::active()->count();
        $lowStockItems = InventoryItem::active()->lowStock()->count();
        $outOfStockItems = InventoryItem::active()->outOfStock()->count();
        $totalValue = InventoryItem::active()->get()->sum('total_value');

        return response()->json([
            'success' => true,
            'stats' => [
                'total_items' => $totalItems,
                'low_stock_items' => $lowStockItems,
                'out_of_stock_items' => $outOfStockItems,
                'total_value' => number_format($totalValue, 2)
            ]
        ]);
    }

    /**
     * Get inventory transaction history for admin view
     */
    public function getTransactions()
    {
        try {
            // Check admin authentication first - use Auth::user() to get the authenticated user
            $user = Auth::user();
            if (!$user || $user->role !== 'admin') {
                Log::error('Admin not authenticated for transaction history request');
                return response()->json([
                    'success' => false,
                    'message' => 'Admin authentication required'
                ], 401);
            }
            
            $adminId = $user->id;
            Log::info("Admin {$adminId} requesting transaction history");
            
            // Check if there are any transactions at all
            $totalCount = InventoryTransaction::count();
            
            if ($totalCount === 0) {
                return response()->json([
                    'success' => true,
                    'transactions' => [],
                    'stats' => [
                        'total_borrowed' => 0,
                        'total_returned' => 0,
                        'active_employees' => 0,
                        'this_month' => 0,
                    ],
                    'message' => 'No transactions found'
                ]);
            }
            
            // Get recent transactions with relationships, but be defensive about missing relationships
            $transactions = InventoryTransaction::with(['inventoryItem', 'employee.user', 'booking'])
                ->orderBy('transaction_at', 'desc')
                ->limit(100) // Limit for performance, could add pagination later
                ->get()
                ->map(function ($transaction) {
                    return [
                        'id' => $transaction->id,
                        'transaction_type' => $transaction->transaction_type,
                        'quantity' => $transaction->quantity,
                        'transaction_at' => $transaction->transaction_at,
                        'item_name' => $transaction->inventoryItem ? $transaction->inventoryItem->name : 'Unknown Item',
                        'item_category' => $transaction->inventoryItem ? $transaction->inventoryItem->category : 'Unknown',
                        'item_code' => $transaction->inventoryItem ? $transaction->inventoryItem->item_code : 'N/A',
                        'employee_name' => $transaction->employee && $transaction->employee->user 
                            ? $transaction->employee->user->first_name . ' ' . $transaction->employee->user->last_name 
                            : 'Unknown Employee',
                        'booking_code' => $transaction->booking ? $transaction->booking->code : null,
                        'notes' => $transaction->notes,
                    ];
                });

            // Calculate statistics
            $stats = [
                'total_borrowed' => InventoryTransaction::borrow()->count(),
                'total_returned' => InventoryTransaction::return()->count(),
                'active_employees' => InventoryTransaction::distinct('employee_id')->count('employee_id'),
                'this_month' => InventoryTransaction::whereMonth('transaction_at', Carbon::now()->month)
                    ->whereYear('transaction_at', Carbon::now()->year)
                    ->count(),
            ];

            return response()->json([
                'success' => true,
                'transactions' => $transactions,
                'stats' => $stats,
                'message' => count($transactions) . ' transactions found'
            ]);

        } catch (\Exception $e) {
            Log::error('Admin transaction history error: ' . $e->getMessage());
            Log::error('Stack trace: ' . $e->getTraceAsString());
            return response()->json([
                'success' => false,
                'message' => 'Failed to load transaction history: ' . $e->getMessage(),
                'debug' => [
                    'line' => $e->getLine(),
                    'file' => basename($e->getFile())
                ]
            ], 500);
        }
    }
}
